# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

parameters:
  displayName: ''
  LiveStreamingWorkingDirectory: ''
  InjectionWorkingDirectory: ''
  sdkurl: ''

jobs:
  - job: ${{ parameters.displayName }}Build
    displayName: ${{ parameters.displayName }}

    pool:
      vmImage: 'vs2017-win2016'

    variables:
      LiveStreamingSolution: '${{ parameters.LiveStreamingWorkingDirectory }}/OpenLive.sln'
      InjectionSolution: '${{ parameters.InjectionWorkingDirectory }}/OpenLive.sln'
      buildPlatform: 'win32'
      buildConfiguration: 'Release'
   
    steps:
      - script: echo "${{ parameters.sdkurl }}"
      - powershell: cicd/script/downloadsdk.ps1 "${{ parameters.sdkurl }}"
   
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: 'AgoraSDK.zip' 
          destinationFolder: 'AgoraSDK'
          
      - task: CopyFiles@2
        inputs:
          sourceFolder: 'AgoraSDK/Agora_Native_SDK_for_Windows_v2.9.3_FULL/'
          targetFolder: ${{ parameters.LiveStreamingWorkingDirectory }}
          overWrite: true

      - task: CopyFiles@3
        inputs:
          sourceFolder: 'AgoraSDK/Agora_Native_SDK_for_Windows_v2.9.3_FULL/'
          targetFolder: ${{ parameters.InjectionWorkingDirectory }}
          overWrite: true

      - script: cd ${{ parameters.LiveStreamingWorkingDirectory }} && ls
              
      - task: VSBuild@1
        inputs:
          solution: '$(LiveStreamingSolution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          vsVersion: '15.0'
          msbuildArchitecture: 'x86'

     - task: VSBuild@2
        inputs:
          solution: '$(InjectionSolution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          vsVersion: '15.0'
          msbuildArchitecture: 'x86'
